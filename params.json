{"name":"Python-sqldict","tagline":"raw sql results returns as dictionary","body":"python-sqldict\r\n==============\r\n[![Build Status](https://travis-ci.org/RedXBeard/python-sqldict.svg?branch=master)](https://travis-ci.org/RedXBeard/python-sqldict)\r\n\r\nRaw SQL results returns as dictionary.\r\n\r\nDevelopers who has lots of works on databases, sometimes, especially written raw sql result or in other words selects become to much to handle, so to play with the result of that sqls become pain; columns has to be remembered which index of result list refers which column etc. (ORM usage is fix this issue but has consequences so even if you are using ORM sometimes as said writing raw sqls preferred)\r\n\r\nTo have a key value pair like dictionaries for sql results will be much more useful, and the pain will become less.\r\n\r\nInstallation\r\n------------\r\nUsing pip library will be installed as following\r\n```bash\r\n$ pip install sqltodict\r\n$ pip install psycopg2\r\n$ pip install mysql-connector-repackaged\r\n```\r\n\r\nUsage for PostgreSQL\r\n--------------------\r\nTo play with postgress database, required connection is as following;\r\n```python\r\n: from sqltodict.connections.postgresqlconnection import PostgreSQLConnection\r\n```\r\n\r\nThere are two ways to make class one is giving all required attributes for making the connection;\r\n```python\r\n: pc = PostgreSQLConnection(sql=\"\"\"select id, code\r\n                                  from product\r\n                                  limit 10\r\n                               \"\"\",\r\n                            database='template1'\r\n                            user='dbuser'\r\n                            host='localhost'\r\n                            password='dbpass',\r\n                            port=5433)\r\n```\r\n\r\nOther one is; cursor will be already generated and it could be enough to making the class;\r\n```python\r\n: import psycopg2\r\n: conn = psycopg2.connect(dbname='template1',\r\n                          user='dbuser',\r\n                          host='localhost',\r\n                          password='dbpass',\r\n                          port=5433)\r\n: cursor = conn.cursor()\r\n: pc = PostgreSQLConnection(sql=\"\"\"select id, code\r\n                                   from product\r\n                                   limit 10\r\n                                \"\"\",\r\n                            cursor=cursor)\r\n```\r\n\r\nExecution is simple as it is;\r\n```python\r\n: pc.execute_sql()\r\n```\r\n\r\nThe result will as following, as default sql select result which is sometimes so hard to continue working.\r\n```python\r\n: pc.result\r\n[(62392, '4YAL61165JW'),\r\n (41308, 'Y14FCD010394'),\r\n (61397, '4YAL16490IK'),\r\n (4396, 'W2WCR0040'),\r\n (61696, '4YAK71063AA'),\r\n (57895, '4YAK38077PW'),\r\n (64853, 'V0400710218'),\r\n (61870, 'Y14LGD021110'),\r\n (55054, '4YAM19187LK'),\r\n (61027, '4YAM19698LK')]\r\n```\r\n\r\nFor dictionary conversion the sql result will be following, as understandable list.\r\n```python\r\n: pc.execute_return_as_dict()\r\n[{'code': '4YAL61165JW', 'id': 62392},\r\n {'code': 'Y14FCD010394', 'id': 41308},\r\n {'code': '4YAL16490IK', 'id': 61397},\r\n {'code': 'W2WCR0040', 'id': 4396},\r\n {'code': '4YAK71063AA', 'id': 61696},\r\n {'code': '4YAK38077PW', 'id': 57895},\r\n {'code': 'V0400710218', 'id': 64853},\r\n {'code': 'Y14LGD021110', 'id': 61870},\r\n {'code': '4YAM19187LK', 'id': 55054},\r\n {'code': '4YAM19698LK', 'id': 61027}]\r\n```\r\n\r\nUsage for MYSQL\r\n---------------\r\nPlaying with an mysql database there are slightly differences; starts with import;\r\n```python\r\n: from sqltodict.connections.mysqlconnection import MYSQLConnection\r\n```\r\n\r\nThere are two ways again to make the class usable;\r\n```python\r\n: mc = MYSQLConnection(sql=\"\"\"select id, code\r\n                              from product\r\n                              limit 10\r\n                           \"\"\",\r\n                       database='template1'\r\n                       user='dbuser'\r\n                       host='localhost'\r\n                       password='dbpass',\r\n                       port=3306)\r\n```\r\n\r\n... or in other way is as mentioned before, as following;\r\n```python\r\n: import mysql.connector\r\n: conn = mysql.connector.connect(user='root',\r\n                                 password='',\r\n                                 host='localhost',\r\n                                 database='template1',\r\n                                 port=3306)\r\n: cursor = conn.cursor()\r\n: mc = MYSQLConnection(sql=\"\"\"select id, code\r\n                              from product\r\n                              limit 10\r\n                           \"\"\",\r\n                       cursor=cursor)\r\n```\r\n\r\nExecution is simple if result is wanted as default one;\r\n```python\r\n: mc.execute_sql()\r\n: mc.result\r\n[(62392, '4YAL61165JW'),\r\n (41308, 'Y14FCD010394'),\r\n (61397, '4YAL16490IK'),\r\n (4396, 'W2WCR0040'),\r\n (61696, '4YAK71063AA'),\r\n (57895, '4YAK38077PW'),\r\n (64853, 'V0400710218'),\r\n (61870, 'Y14LGD021110'),\r\n (55054, '4YAM19187LK'),\r\n (61027, '4YAM19698LK')]\r\n```\r\n\r\nIf dictionary type of result is requested, directly;\r\n```python\r\n: mc.execute_return_as_dict()\r\n[{'code': u'W2WCR0040', 'id': 4396},\r\n {'code': u'Y14FCD010394', 'id': 41308},\r\n {'code': u'4YAM19187LK', 'id': 55054},\r\n {'code': u'4YAK38077PW', 'id': 57895},\r\n {'code': u'4YAM19698LK', 'id': 61027},\r\n {'code': u'4YAL16490IK', 'id': 61397},\r\n {'code': u'4YAK71063AA', 'id': 61696},\r\n {'code': u'Y14LGD021110', 'id': 61870},\r\n {'code': u'4YAL61165JW', 'id': 62392},\r\n {'code': u'V0400710218', 'id': 64853}]\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}